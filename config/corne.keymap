/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <14 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            hold-trigger-on-release;
        };

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38>;
            hold-trigger-on-release;
        };

        td: tap_dance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_DANCE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
        };

        slt: space_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "SPACE_LAYER_TAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <100>;
            flavor = "hold-preferred";
            hold-trigger-key-positions = <38 39>;
            hold-trigger-on-release;
        };

        sticky_shift: sticky_shift {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_SHIFT";
            bindings = <&kp>;
            #binding-cells = <1>;
            quick-release;
            release-after-ms = <1000>;
        };
    };

    combos {
        compatible = "zmk,combos";

        LBrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <31 32>;
            require-prior-idle-ms = <130>;
        };

        RBrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <32 33>;
            require-prior-idle-ms = <130>;
        };

        LParen {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <19 20>;
            require-prior-idle-ms = <130>;
        };

        RParen {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <20 21>;
            require-prior-idle-ms = <130>;
        };

        Mac_Copy {
            bindings = <&kp RG(C)>;
            key-positions = <26 27>;
            require-prior-idle-ms = <130>;
        };

        Mac_Paste {
            bindings = <&kp LG(V)>;
            key-positions = <27 28>;
            require-prior-idle-ms = <130>;
        };

        Mac_cut {
            bindings = <&kp LG(X)>;
            key-positions = <25 26>;
            require-prior-idle-ms = <130>;
        };

        LBrac {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <7 8>;
            require-prior-idle-ms = <130>;
        };

        RBrac {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 9>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESC   &kp Q         &kp W            &kp E            &kp R                     &kp T                       &kp Y                     &kp U               &kp I             &kp O            &kp P                    &kp MINUS
&kp TAB   &hml LCTRL A  &hml LEFT_ALT S  &hml LEFT_GUI D  &hml LEFT_SHIFT F         &hml LS(LA(LG(LCTRL))) G    &hmr RS(RG(RA(RCTRL))) H  &hmr RIGHT_SHIFT J  &hmr RIGHT_GUI K  &hmr LEFT_ALT L  &hmr RIGHT_CONTROL SEMI  &kp SQT
&kp CAPS  &kp Z         &kp X            &kp C            &kp V                     &kp B                       &kp N                     &kp M               &kp COMMA         &kp DOT          &kp FSLH                 &td LC(GRAVE) GRAVE
                                         &kp LEFT_GUI     &sticky_shift LEFT_SHIFT  &slt 1 SPACE                &slt 2 RET                &kp BACKSPACE       &tog 3
            >;
        };

        num_layer {
            bindings = <
&trans       &kp EXCLAMATION  &kp AT_SIGN    &kp HASH      &kp DOLLAR    &kp PERCENT    &kp PLUS   &kp N7  &kp N8  &kp N9  &kp N0           &trans
&trans       &kp CARET        &kp AMPERSAND  &kp ASTERISK  &kp NUMBER_0  &kp PIPE       &kp EQUAL  &kp N4  &kp N5  &kp N6  &kp KP_MULTIPLY  &trans
&kp C_RESET  &trans           &trans         &trans        &trans        &trans         &kp MINUS  &kp N1  &kp N2  &kp N3  &kp PERIOD       &trans
                                             &trans        &trans        &trans         &trans     &trans  &trans
            >;
        };

        nav_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &msc SCRL_UP    &msc SCRL_LEFT   &mmv MOVE_UP          &msc SCRL_RIGHT        &trans              &mkp RCLK          &kp HOME  &kp UP    &kp END    &kp PAGE_UP    &trans
&trans  &msc SCRL_DOWN  &mmv MOVE_LEFT   &mmv MOVE_DOWN        &mmv MOVE_RIGHT        &trans              &mkp LCLK          &kp LEFT  &kp DOWN  &kp RIGHT  &kp PAGE_DOWN  &trans
&trans  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET    &kp RIGHT_BRACKET  &trans    &trans    &trans     &trans         &trans
                                         &trans                &trans                 &trans              &trans             &trans    &trans
            >;
        };

        bt_layer {
            bindings = <
&kp F1          &kp F2        &kp F3        &kp F4        &kp F5        &kp F6          &kp F7            &kp F8                &kp F9                &kp F10     &kp F11         &kp F12
&bt BT_CLR      &trans        &trans        &trans        &bt BT_PRV    &bt BT_NXT      &kp K_PLAY_PAUSE  &kp K_VOLUME_DOWN     &kp K_VOLUME_UP       &kp K_NEXT  &kp K_PREVIOUS  &trans
&bt BT_CLR_ALL  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0    &trans            &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans      &trans          &trans
                                            &trans        &trans        &trans          &trans            &trans                &to 0
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        bt-layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
